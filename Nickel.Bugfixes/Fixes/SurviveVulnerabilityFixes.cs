using HarmonyLib;
using Microsoft.Extensions.Logging;
using Nanoray.Shrike;
using Nanoray.Shrike.Harmony;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Reflection.Emit;

namespace Nickel.Bugfixes;

internal static class SurviveVulnerabilityFixes
{
	public static void ApplyPatches(IHarmony harmony)
	{
		ModEntry.Instance.Helper.Events.RegisterAfterArtifactsHook(nameof(Artifact.OnQueueEmptyDuringPlayerTurn), (State state, Combat combat) =>
		{
			ModEntry.Instance.Helper.ModData.RemoveModData(state.ship, "SurviveInvulnerability");
			ModEntry.Instance.Helper.ModData.RemoveModData(combat.otherShip, "SurviveInvulnerability");
		}, -1_000_000);
		
		harmony.Patch(
			original: AccessTools.DeclaredMethod(typeof(Ship), nameof(Ship.DirectHullDamage))
			          ?? throw new InvalidOperationException($"Could not patch game methods: missing method `{nameof(Ship)}.{nameof(Ship.DirectHullDamage)}`"),
			transpiler: new HarmonyMethod(MethodBase.GetCurrentMethod()!.DeclaringType!, nameof(Ship_DirectHullDamage_Transpiler))
		);
	}

	private static IEnumerable<CodeInstruction> Ship_DirectHullDamage_Transpiler(IEnumerable<CodeInstruction> instructions, MethodBase originalMethod, ILGenerator il)
	{
		// ReSharper disable PossibleMultipleEnumeration
		try
		{
			return new SequenceBlockMatcher<CodeInstruction>(instructions)
				.PointerMatcher(SequenceMatcherRelativeElement.First)
				.CreateLabel(il, out var label)
				.Insert(SequenceMatcherPastBoundsDirection.Before, SequenceMatcherInsertionResultingBounds.IncludingInsertion, [
					new CodeInstruction(OpCodes.Ldarg_0),
					new CodeInstruction(OpCodes.Call, AccessTools.DeclaredMethod(MethodBase.GetCurrentMethod()!.DeclaringType!, nameof(Ship_DirectHullDamage_Transpiler_IsInvulnerable))),
					new CodeInstruction(OpCodes.Brfalse, label),
					new CodeInstruction(OpCodes.Ret),
				])
				.Find([
					ILMatches.Ldarg(0),
					ILMatches.LdcI4((int)Status.survive),
					ILMatches.LdcI4(-1),
					ILMatches.Call("Add"),
				])
				.Insert(SequenceMatcherPastBoundsDirection.After, SequenceMatcherInsertionResultingBounds.IncludingInsertion, [
					new CodeInstruction(OpCodes.Ldarg_0),
					new CodeInstruction(OpCodes.Call, AccessTools.DeclaredMethod(MethodBase.GetCurrentMethod()!.DeclaringType!, nameof(Ship_DirectHullDamage_Transpiler_MarkAsInvulnerable))),
				])
				.AllElements();
		}
		catch (Exception ex)
		{
			ModEntry.Instance.Logger.LogError("Could not patch method {DeclaringType}::{Method} - {Mod} probably won't work.\nReason: {Exception}", originalMethod.DeclaringType, originalMethod, ModEntry.Instance.Package.Manifest.UniqueName, ex);
			return instructions;
		}
		// ReSharper restore PossibleMultipleEnumeration
	}

	private static bool Ship_DirectHullDamage_Transpiler_IsInvulnerable(Ship ship)
		=> ModEntry.Instance.Helper.ModData.GetModDataOrDefault<bool>(ship, "SurviveInvulnerability");

	private static void Ship_DirectHullDamage_Transpiler_MarkAsInvulnerable(Ship ship)
		=> ModEntry.Instance.Helper.ModData.SetModData(ship, "SurviveInvulnerability", true);
}
